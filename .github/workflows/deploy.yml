# name: 'Deploy DotsOCR to Production'

# on:
#   push:
#     branches: [main]
#   workflow_dispatch: # Allow manual triggering

# jobs:
#   deploy:
#     name: Build and Deploy DotsOCR Stack
#     runs-on: ubuntu-latest
    
#     strategy:
#       matrix:
#         node-version: [20.x]

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
        
#       - name: Set up Node.js ${{ matrix.node-version }}
#         uses: actions/setup-node@v3
#         with:
#           node-version: ${{ matrix.node-version }}
          
#       - name: Install pnpm
#         uses: pnpm/action-setup@v2
#         with:
#           version: 8
          
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: eu-west-2
          
#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2
        
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3
        
#       - name: Copy DotsOCR source code
#         run: |
#           echo "Checking for DotsOCR source code..."
#           if [ ! -d "third_party/dots_ocr" ]; then
#             echo "❌ DotsOCR source code not found in repository"
#             echo "Please ensure third_party/dots_ocr/ directory is included in the repository"
#             exit 1
#           fi
#           echo "✅ DotsOCR source code found"
#           # Create symlink for Docker build compatibility
#           ln -sf third_party/dots_ocr vendor
          
#       - name: Build Docker image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: dotsocr-vllm
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           echo "Building Docker image..."
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
#           echo "image-uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
#         id: build-image
        
#       - name: Create ECR repository if it doesn't exist
#         env:
#           ECR_REPOSITORY: dotsocr-vllm
#         run: |
#           aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region eu-west-2 || \
#           aws ecr create-repository --repository-name $ECR_REPOSITORY --region eu-west-2
          
#       - name: Push Docker image to ECR
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: dotsocr-vllm
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           echo "Pushing Docker image to ECR..."
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
#           echo "✅ Docker image pushed successfully"
          
#       - name: Install CDK dependencies
#         working-directory: ./cdk
#         run: |
#           echo "Installing CDK dependencies..."
#           pnpm install
          
#       - name: Build CDK project
#         working-directory: ./cdk
#         run: |
#           echo "Building CDK project..."
#           pnpm run build
          
#       - name: Bootstrap CDK (if needed)
#         working-directory: ./cdk
#         run: |
#           echo "Checking CDK bootstrap status..."
#           npx cdk bootstrap aws://$(aws sts get-caller-identity --query Account --output text)/eu-west-2 || true
          
#       - name: Deploy CDK stack
#         working-directory: ./cdk
#         env:
#           CDK_DEFAULT_REGION: eu-west-2
#           CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
#         run: |
#           echo "Deploying CDK stack..."
#           npx cdk deploy --require-approval never --verbose
#           echo "✅ CDK stack deployed successfully"
          
#       - name: Output deployment information
#         run: |
#           echo "🎉 Deployment completed successfully!"
#           echo "Region: eu-west-2"
#           echo "Docker Image: ${{ steps.login-ecr.outputs.registry }}/dotsocr-vllm:${{ github.sha }}"
          
#           # Get stack outputs
#           echo "📋 Stack Outputs:"
#           aws cloudformation describe-stacks \
#             --stack-name DotsOcrSagemakerStack \
#             --region eu-west-2 \
#             --query 'Stacks[0].Outputs[*].[OutputKey,OutputValue]' \
#             --output table || echo "Stack outputs not available yet"
