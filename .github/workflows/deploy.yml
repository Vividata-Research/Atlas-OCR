name: Deploy DotsOCR (CDK + Assets)

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: dotsocr
  DOCKER_BUILDKIT: 1

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: dotsocr-deploy-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      # üîê OIDC to AWS
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::597088029880:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
          role-session-name: gha-${{ github.run_id }}

      - name: Who am I (sanity + export account ID)
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "AWS_ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV
          echo "‚úÖ Running as $ACCOUNT_ID in ${{ env.AWS_REGION }}"

      # ‚ö° Buildx with container driver (required for cache-to/from)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repo exists (app repo for your image)
        run: |
          aws ecr describe-repositories --repository-names "${{ env.ECR_REPOSITORY }}" >/dev/null 2>&1 \
            || aws ecr create-repository --repository-name "${{ env.ECR_REPOSITORY }}" >/dev/null

      # Build & push ‚Äî GHA cache only (no pre-warm, no registry cache)
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./container
          file: ./container/Dockerfile
          builder: default
          push: true
          provenance: false
          pull: false
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          tags: |
            ${AWS_ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest
          cache-from: |
            type=gha,scope=dotsocr-build
          cache-to: |
            type=gha,mode=max,scope=dotsocr-build

      - name: Export image URI (digest)
        run: |
          DIGEST="${{ steps.build.outputs.digest }}"
          IMAGE="${AWS_ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}@${DIGEST}"
          echo "DOCKER_IMAGE_URI=$IMAGE" >> $GITHUB_ENV
          echo "üìå Using immutable image $IMAGE"

      - name: Verify DotsOCR source is vendored
        run: |
          if [ ! -d "container/third_party/dots.ocr" ]; then
            echo "‚ùå Missing container/third_party/dots.ocr (the local repo you install -e)."
            exit 1
          fi
          echo "‚úÖ Found container/third_party/dots.ocr"

      - name: Install CDK deps
        working-directory: ./cdk
        run: pnpm install --frozen-lockfile

      - name: Build CDK app
        working-directory: ./cdk
        run: pnpm run build

      - name: Bootstrap CDK
        working-directory: ./cdk
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          npx cdk bootstrap aws://$AWS_ACCOUNT_ID/$AWS_REGION || true

      - name: Deploy stack (CDK uses prebuilt image)
        working-directory: ./cdk
        env:
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}
          DOCKER_IMAGE_URI: ${{ env.DOCKER_IMAGE_URI }}
        run: |
          npx cdk deploy DotsOcrSagemakerStack --require-approval never --verbose

      - name: Show stack outputs
        run: |
          aws cloudformation describe-stacks \
            --stack-name DotsOcrSagemakerStack \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[*].[OutputKey,OutputValue]' \
            --output table || true
