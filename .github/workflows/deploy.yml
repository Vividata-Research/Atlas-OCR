name: Deploy DotsOCR (CDK + Assets)

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write   # needed for OIDC
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: dotsocr-deploy-${{ github.ref }}
      cancel-in-progress: true

    env:
      AWS_REGION: eu-west-2
      ECR_REPOSITORY: dotsocr
      DOCKERFILE: container/Dockerfile
      BUILD_CONTEXT: container
      DOCKER_BUILDKIT: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::597088029880:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
          role-session-name: gha-${{ github.run_id }}

      - name: Who am I (sanity)
        run: aws sts get-caller-identity

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # OPTIONAL: free some disk up front (helps large builds)
      - name: Free disk space (optional)
        run: |
          sudo rm -rf /usr/local/lib/android || true
          sudo rm -rf /opt/ghc || true
          sudo rm -rf "$AGENT_TOOLSDIRECTORY" || true
          docker system df || true

      # OPTIONAL: make sure the repo exists (both the main tag and the cache tag use the same repo)
      - name: Ensure ECR repo exists
        run: |
          aws ecr describe-repositories --repository-names "${{ env.ECR_REPOSITORY }}" \
            || aws ecr create-repository --repository-name "${{ env.ECR_REPOSITORY }}" >/dev/null

      # Build & push using ECR as the cache backend (no GitHub cache)
      - name: Build & push image to ECR (ECR-backed cache)
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./${{ env.BUILD_CONTEXT }}
          file: ${{ env.DOCKERFILE }}
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          # üëá Use ECR as cache
          cache-from: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:cache
          cache-to: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:cache,mode=max,compression=zstd
          provenance: false
          outputs: type=registry,push=true

      # Keep the runner clean so we don't hit disk full next steps / next runs
      - name: Prune buildx cache
        run: |
          docker buildx prune -f
          docker system df || true

      - name: Verify DotsOCR source is vendored
        run: |
          if [ ! -d "container/third_party/dots.ocr" ]; then
            echo "‚ùå Missing container/third_party/dots.ocr (the local repo you install -e)."
            exit 1
          fi
          echo "‚úÖ Found container/third_party/dots.ocr"

      - name: Install CDK deps
        working-directory: ./cdk
        run: pnpm install --frozen-lockfile

      - name: Build CDK app
        working-directory: ./cdk
        run: pnpm run build

      - name: Bootstrap CDK
        working-directory: ./cdk
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          npx cdk bootstrap aws://$ACCOUNT_ID/$AWS_REGION || true

      - name: Deploy stack
        working-directory: ./cdk
        env:
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}
        run: |
          npx cdk deploy DotsOcrSagemakerStack --require-approval never --verbose

      - name: Show stack outputs
        run: |
          aws cloudformation describe-stacks \
            --stack-name DotsOcrSagemakerStack \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[*].[OutputKey,OutputValue]' \
            --output table || true
