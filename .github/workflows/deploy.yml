name: Deploy DotsOCR (CDK + Assets)

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: dotsocr
  DOCKER_BUILDKIT: 1
  SOURCE_DATE_EPOCH: 1758672000

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: dotsocr-deploy-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      # OIDC to AWS
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::597088029880:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
          role-session-name: gha-${{ github.run_id }}

      - name: Who am I (sanity)
        run: aws sts get-caller-identity

      # Only build if Docker context changed
      - name: Detect Docker context changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            docker:
              - 'container/**'

      # Optional: reclaim space ONLY when we're going to build
      - name: Free disk space (optional)
        if: steps.changes.outputs.docker == 'true'
        run: |
          mkdir -p /tmp/empty
          sudo rsync -a --delete /tmp/empty/ /usr/local/lib/android/ || true
          sudo rm -rf /usr/local/lib/android || true
          sudo rm -rf /usr/share/dotnet || true
          sudo rm -rf /opt/hostedtoolcache || true
          df -h

      # ‚ö° Buildx with docker-container driver (needed for cache backends)
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true
          driver-opts: |
            image=moby/buildkit:buildx-stable-1

      - name: Show buildx info
        run: docker buildx inspect ${{ steps.buildx.outputs.name }} --bootstrap

      - name: Log in to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repo exists (app repo for your image)
        run: |
          aws ecr describe-repositories --repository-names "${{ env.ECR_REPOSITORY }}" >/dev/null 2>&1 \
            || aws ecr create-repository --repository-name "${{ env.ECR_REPOSITORY }}" >/dev/null

      # Build & push with GitHub Actions cache (only when Docker context changed)
      - name: Build and push Docker image
        if: steps.changes.outputs.docker == 'true'
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./container
          file: ./container/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}    # use container driver builder
          push: true
          provenance: false
          pull: false
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            SOURCE_DATE_EPOCH=${{ env.SOURCE_DATE_EPOCH }}
            BASE_IMAGE=${{ steps.ecr.outputs.registry }}/docker/vllm/vllm-openai:v0.9.1
          tags: |
            ${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: |
            type=gha,scope=dotsocr-build
          cache-to: |
            type=gha,mode=max,scope=dotsocr-build

      # If we built, export the new digest and prune old images
      - name: Export image URI (digest) ‚Äî from build
        if: steps.changes.outputs.docker == 'true'
        run: |
          DIGEST="${{ steps.build.outputs.digest }}"   # e.g. sha256:abc...
          IMAGE="${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}@${DIGEST}"
          echo "DOCKER_IMAGE_URI=$IMAGE" >> $GITHUB_ENV
          echo "üìå Using immutable image (new build): $IMAGE"

      - name: Prune old images in ECR (keep only the new digest)
        if: steps.changes.outputs.docker == 'true'
        env:
          CUR_DIGEST: ${{ steps.build.outputs.digest }}
        run: |
          REPO="${{ env.ECR_REPOSITORY }}"
          # Collect all other digests in the repo (excluding the one we just pushed)
          OTHER_DIGESTS=$(aws ecr describe-images \
            --repository-name "$REPO" \
            --query "imageDetails[?imageDigest!='${CUR_DIGEST}'].imageDigest" \
            --output text)

          if [ -n "$OTHER_DIGESTS" ]; then
            echo "üßπ Deleting old images in $REPO..."
            ARGS=""
            for d in $OTHER_DIGESTS; do
              ARGS="$ARGS imageDigest=$d"
            done
            # Batch-delete (ignore failure if some are already gone)
            aws ecr batch-delete-image --repository-name "$REPO" --image-ids $ARGS || true
          else
            echo "Nothing to prune."
          fi

      # If we didn't build, reuse current :latest digest from ECR
      - name: Export image URI (digest) ‚Äî reuse existing :latest
        if: steps.changes.outputs.docker != 'true'
        run: |
          DIGEST=$(aws ecr describe-images \
            --repository-name "${{ env.ECR_REPOSITORY }}" \
            --image-ids imageTag=latest \
            --query 'imageDetails[0].imageDigest' \
            --output text)
          if [ -z "$DIGEST" ] || [ "$DIGEST" = "None" ]; then
            echo "‚ùå No :latest image found in ECR; nothing to deploy."
            exit 1
          fi
          IMAGE="${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}@${DIGEST}"
          echo "DOCKER_IMAGE_URI=$IMAGE" >> $GITHUB_ENV
          echo "üìå Using immutable image (reused): $IMAGE"

      - name: Verify DotsOCR source is vendored
        run: |
          if [ ! -d "container/third_party/dots.ocr" ]; then
            echo "‚ùå Missing container/third_party/dots.ocr (the local repo you install -e)."
            exit 1
          fi
          echo "‚úÖ Found container/third_party/dots.ocr"

      - name: Install CDK deps
        working-directory: ./cdk
        run: pnpm install --frozen-lockfile

      - name: Build CDK app
        working-directory: ./cdk
        run: pnpm run build

      - name: Bootstrap CDK
        working-directory: ./cdk
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          npx cdk bootstrap aws://$ACCOUNT_ID/$AWS_REGION || true

      - name: Deploy stack (CDK uses prebuilt image)
        working-directory: ./cdk
        env:
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}
          DOCKER_IMAGE_URI: ${{ env.DOCKER_IMAGE_URI }}
        run: |
          npx cdk deploy DotsOcrSagemakerStack --require-approval never --verbose

      - name: Show stack outputs
        run: |
          aws cloudformation describe-stacks \
            --stack-name DotsOcrSagemakerStack \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[*].[OutputKey,OutputValue]' \
            --output table || true
