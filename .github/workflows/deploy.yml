name: Deploy DotsOCR (CDK + Assets)

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write   # needed for OIDC
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: dotsocr-deploy-${{ github.ref }}
      cancel-in-progress: true

    env:
      AWS_REGION: eu-west-2
      DOCKER_BUILDKIT: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      # üîê Assume your OIDC role (no static secrets needed)
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::597088029880:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
          role-session-name: gha-${{ github.run_id }}

      - name: Who am I (sanity)
        run: aws sts get-caller-identity


      # Optional: reclaim space to avoid ENOSPC during big builds
      - name: Free disk space (optional)
        run: |
          sudo rm -rf /usr/local/lib/android || true
          sudo rm -rf /usr/share/dotnet || true
          sudo rm -rf /opt/hostedtoolcache || true
          df -h
          docker system df || true

      - name: Verify DotsOCR source is vendored
        run: |
          if [ ! -d "container/third_party/dots.ocr" ]; then
            echo "‚ùå Missing container/third_party/dots.ocr (the local repo you install -e)."
            exit 1
          fi
          echo "‚úÖ Found container/third_party/dots.ocr"

      - name: Install CDK deps
        working-directory: ./cdk
        run: pnpm install --frozen-lockfile

      - name: Build CDK app
        working-directory: ./cdk
        run: pnpm run build

      # Safe to run every time; creates/updates the CDK bootstrap stack
      - name: Bootstrap CDK
        working-directory: ./cdk
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          npx cdk bootstrap aws://$ACCOUNT_ID/$AWS_REGION || true

      # CDK will build the DockerImageAsset, using ECR-backed cache from the stack config
      - name: Deploy stack (CDK builds & pushes image)
        working-directory: ./cdk
        env:
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}
        run: |
          npx cdk deploy DotsOcrSagemakerStack --require-approval never --verbose

      - name: Show stack outputs
        run: |
          aws cloudformation describe-stacks \
            --stack-name DotsOcrSagemakerStack \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[*].[OutputKey,OutputValue]' \
            --output table || true